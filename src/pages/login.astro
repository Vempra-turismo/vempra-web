---
import Layout from '../layouts/Layout.astro';

const errorMessage = Astro.url.searchParams.get('error');
---
<Layout title="Iniciar Sesión - Administración">
  <main class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
      <h1 class="text-2xl font-bold text-primary mb-6 text-center">Acceso de Administrador</h1>
      
      {errorMessage && (
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          {/* Este bloque se mantiene para errores que vienen de una redirección */}
          <span class="block sm:inline">{errorMessage}</span>
        </div>
      )}

      <form id="login-form" class="space-y-6">
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700">Contraseña:</label>
          <input 
            type="password" 
            id="password" 
            name="password" 
            class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm"
            required 
          />
        </div>
        <div>
          <button 
            type="submit" 
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          >
            Iniciar Sesión
          </button>
        </div>
      </form>
      <!-- Contenedor para mostrar errores dinámicamente -->
      <div id="error-container" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4 hidden" role="alert">
        <span id="error-message" class="block sm:inline"></span>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('login-form') as HTMLFormElement | null;
    const errorContainer = document.getElementById('error-container') as HTMLDivElement | null;
    const errorMessageSpan = document.getElementById('error-message') as HTMLSpanElement | null;

    if (!form || !errorContainer || !errorMessageSpan) {
      console.error('Error: No se pudieron encontrar los elementos del formulario de login.');
      return;
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const password = (form.elements.namedItem('password') as HTMLInputElement).value;
      
      errorContainer.classList.add('hidden');
      
      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ password }),
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
          window.location.href = data.redirect || '/admin';
        } else {
          errorMessageSpan.textContent = data.message || 'Ocurrió un error inesperado.';
          errorContainer.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error de red o al procesar la petición:', error);
        errorMessageSpan.textContent = 'Error de red o el servidor no responde.';
        errorContainer.classList.remove('hidden');
      }
    });
  });
</script>