'''---
import AdminLayout from '@/layouts/AdminLayout.astro';
import db from '@/lib/turso';
import { v2 as cloudinary } from 'cloudinary';
import { Buffer } from 'node:buffer';

cloudinary.config({
    cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME,
    api_key: import.meta.env.CLOUDINARY_API_KEY,
    api_secret: import.meta.env.CLOUDINARY_API_SECRET,
    secure: true,
});

// --- Helper para subir imagen a Cloudinary ---
const uploadImage = async (file: File, folder: string): Promise<string> => {
    if (!file || file.size === 0) return '';
    try {
        const arrayBuffer = await file.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        const uploadResult: any = await new Promise((resolve, reject) => {
            const uploadStream = cloudinary.uploader.upload_stream({ folder }, (error, result) => {
                if (result) resolve(result);
                else reject(error);
            });
            uploadStream.end(buffer);
        });
        return uploadResult.secure_url;
    } catch (e) {
        console.error(`Error al subir la imagen a Cloudinary (folder: ${folder}):`, e);
        throw new Error(`Error al procesar la imagen: ${(e as Error).message}`);
    }
};


// --- Proteger la página ---
if (!Astro.cookies.has('session')) {
  return Astro.redirect('/login');
}

// --- Obtener datos para los selectores del formulario ---
const countries = (await db.execute("SELECT id, name FROM countries ORDER BY name")).rows;
const localities = (await db.execute("SELECT id, name, country_id FROM localities ORDER BY name")).rows;
const tags = (await db.execute("SELECT id, name FROM tags ORDER BY name")).rows;
const departures = (await db.execute("SELECT id, name FROM departures ORDER BY name")).rows;
const staff = (await db.execute("SELECT * FROM staff ORDER BY sort_order, name")).rows;
let formMessage: { type: 'success' | 'error'; text: string } | null = null;

// --- Lógica para mostrar mensajes de éxito/error desde la redirección ---
const successMessage = Astro.url.searchParams.get('success');
const errorMessage = Astro.url.searchParams.get('error');

if (successMessage) {
    const successMap = {
        'staff_added': '¡Miembro del equipo añadido con éxito!',
        'staff_order_updated': '¡El orden del equipo ha sido actualizado con éxito!',
        'staff_updated': '¡Miembro del equipo actualizado con éxito!',
        'trip_saved': '¡Viaje guardado con éxito!'
    };
    if (successMap[successMessage]) formMessage = { type: 'success', text: successMap[successMessage] };
}
if (errorMessage) {
    const errorMap = {
        'missing_staff_fields': 'Para añadir un miembro, el nombre, el cargo y la foto son obligatorios.'
    };
    formMessage = { type: 'error', text: errorMap[errorMessage] || decodeURIComponent(errorMessage) };
}

// --- Lógica para manejar el envío del formulario (POST) ---
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const categoryId = formData.get('category_id')?.toString();
  const intent = formData.get('intent')?.toString();

  try { // Envolvemos toda la lógica en un try...catch para manejar errores de forma segura.
    switch (intent) {
      case 'update_country': {
      const countryName = formData.get('country_name')?.toString();
      const countryUrl = formData.get('country_url')?.toString();
      if (countryName && countryUrl && categoryId) {
        await db.execute({
          sql: "UPDATE countries SET name = ?, url = ? WHERE id = ?",
          args: [countryName, countryUrl, categoryId],
        });
      }
      break;
      }
      case 'update_locality': {
      const localityName = formData.get('locality_name')?.toString();
      const localityUrl = formData.get('locality_url')?.toString();
      const countryId = formData.get('parent_country_id')?.toString();
      if (localityName && localityUrl && countryId && categoryId) {
        await db.execute({
          sql: "UPDATE localities SET name = ?, url = ?, country_id = ? WHERE id = ?",
          args: [localityName, localityUrl, countryId, categoryId],
        });
      }
      break;
      }
      case 'update_tag': {
      const tagName = formData.get('tag_name')?.toString();
      if (tagName && categoryId) {
        await db.execute({
          sql: "UPDATE tags SET name = ? WHERE id = ?",
          args: [tagName, categoryId],
        });
      }
      break;
      }
      case 'add_country': {
      const countryName = formData.get('country_name')?.toString();
      const countryUrl = formData.get('country_url')?.toString();
      if (countryName && countryUrl) {
        await db.execute({
          sql: "INSERT INTO countries (name, url) VALUES (?, ?)",
          args: [countryName, countryUrl],
        });
      }
      break;
      }
      case 'add_locality': {
      const localityName = formData.get('locality_name')?.toString();
      const localityUrl = formData.get('locality_url')?.toString();
      const countryId = formData.get('parent_country_id')?.toString();
      if (localityName && localityUrl && countryId) {
        await db.execute({
          sql: "INSERT INTO localities (name, url, country_id) VALUES (?, ?, ?)",
          args: [localityName, localityUrl, countryId],
        });
      }
      break;
      }
      case 'add_tag': {
      const tagName = formData.get('tag_name')?.toString();
      if (tagName) {
        await db.execute({
          sql: "INSERT INTO tags (name) VALUES (?)" ,
          args: [tagName],
        });
      }
      break;
      }
      case 'delete_country': {
      if (categoryId) {
        try {
          await db.execute({ sql: "DELETE FROM countries WHERE id = ?", args: [categoryId] });
        } catch (e) {
          console.error("Error al eliminar país (probablemente en uso):", (e as Error).message);
        }
      }
      break;
      }
      case 'delete_locality': {
      if (categoryId) {
        try {
          await db.execute({ sql: "DELETE FROM localities WHERE id = ?", args: [categoryId] });
        } catch (e) {
          console.error("Error al eliminar localidad (probablemente en uso):", (e as Error).message);
        }
      }
      break;
      }
      case 'delete_tag': {
      if (categoryId) {
        await db.execute({ sql: "DELETE FROM tags WHERE id = ?", args: [categoryId] });
      }
      break;
      }
      case 'update_departure': {
      const name = formData.get('departure_name')?.toString();
      const url = formData.get('departure_url')?.toString();
      if (name && url && categoryId) {
        await db.execute({
          sql: "UPDATE departures SET name = ?, url = ? WHERE id = ?",
          args: [name, url, categoryId],
        });
      }
      break;
      }
      case 'add_departure': {
      const name = formData.get('departure_name')?.toString();
      const url = formData.get('departure_url')?.toString();
      if (name && url) {
        await db.execute({
          sql: "INSERT INTO departures (name, url) VALUES (?, ?)",
          args: [name, url],
        });
      }
      break;
      }
      case 'delete_departure': {
      if (categoryId) {
        try {
          await db.execute({ sql: "DELETE FROM departures WHERE id = ?", args: [categoryId] });
        } catch (e) {
          console.error("Error al eliminar salida (probablemente en uso):", (e as Error).message);
        }
      }
      break;
      }
      case 'add_staff': {
        const name = formData.get('staff_name')?.toString();
        const position = formData.get('staff_position')?.toString();
        const description = formData.get('staff_description')?.toString();
        const imageFile = formData.get('staff_imageFile') as File;
        
        const imageUrl = await uploadImage(imageFile, 'vempra_staff');

        if (name && position && imageUrl) {
            await db.execute({
                sql: "INSERT INTO staff (name, position, description, imageUrl, sort_order) VALUES (?, ?, ?, ?, (SELECT IFNULL(MAX(sort_order), -1) + 1 FROM staff))",
                args: [name, position, description, imageUrl],
            });
        } else {
            formMessage = { type: 'error', text: 'Para añadir un miembro, el nombre, el cargo y la foto son obligatorios.' };
        }
        break;
      }
      case 'update_staff': {
        const staffId = formData.get('staff_id')?.toString();
        const name = formData.get('staff_name')?.toString();
        const position = formData.get('staff_position')?.toString();
        const description = formData.get('staff_description')?.toString();
        const imageFile = formData.get('staff_imageFile') as File;
        let imageUrl = formData.get('staff_imageUrl')?.toString() || ''; // URL existente

        if (imageFile && imageFile.size > 0) {
            imageUrl = await uploadImage(imageFile, 'vempra_staff');
        }

        if (staffId && name && position && imageUrl) {
            await db.execute({
                sql: "UPDATE staff SET name = ?, position = ?, description = ?, imageUrl = ? WHERE id = ?",
                args: [name, position, description, imageUrl, staffId],
            });
        } else {
             formMessage = { type: 'error', text: 'Faltan campos para actualizar el miembro del equipo.' };
        }
        break;
      }
      case 'delete_staff': {
        const staffId = formData.get('staff_id')?.toString();
        if (staffId) {
            await db.execute({ sql: "DELETE FROM staff WHERE id = ?", args: [staffId] });
        }
        break;
      }
      case 'update_staff_order': {
        const orderedIdsRaw = formData.get('staff_order')?.toString();
        if (orderedIdsRaw) {
            const orderedIds = orderedIdsRaw.split(',');
            const updateStatements = orderedIds.map((id, index) => ({
                sql: "UPDATE staff SET sort_order = ? WHERE id = ?",
                args: [index, parseInt(id, 10)]
            }));
            await db.batch(updateStatements, 'write');
        }
        break;
      }
      case 'add_update_trip': {
        const tripId = formData.get('id')?.toString();
        const isNew = !tripId;

        // --- 1. Subir imagen principal ---
        let mainImageUrl = formData.get('imageUrl')?.toString() || '';
        const mainImageFile = formData.get('imageFile') as File;
        if (mainImageFile && mainImageFile.size > 0) {
            mainImageUrl = await uploadImage(mainImageFile, 'vempra_trips');
        }

        // --- 2. Recopilar datos del viaje (sin itinerarios) ---
        const tripData = {
            title: formData.get('title')?.toString() || '',
            slogan: formData.get('slogan')?.toString() || null,
            url: formData.get('url')?.toString() || '',
            price: formData.get('price') ? parseFloat(formData.get('price').toString()) : null,
            days: formData.get('days')?.toString() || '',
            generalDetails: formData.get('generalDetails')?.toString() || null,
            imageUrl: mainImageUrl,
            terms_conditions: formData.get('terms_conditions')?.toString() || null,
            travel_type: formData.get('travel_type')?.toString() || 'Personalizado',
            locality_id: formData.get('locality_id') ? parseInt(formData.get('locality_id').toString(), 10) : null,
            season_year: formData.get('season_year') ? parseInt(formData.get('season_year').toString(), 10) : null,
            season_name: formData.get('season_name')?.toString() || null,
            itinerary: formData.get('itinerary') || '[]', // Se actualizará después
            full_itinerary: '[]', // Se actualizará después
            hotels_info: formData.get('hotels_info')?.toString() || null,
            flights_info: formData.get('flights_info')?.toString() || null,
            departure_id: formData.get('departure_id') ? parseInt(formData.get('departure_id').toString(), 10) : null,
        };

        // --- 3. Insertar o Actualizar el viaje para obtener el ID ---
        let currentTripId = tripId;
        if (isNew) {
            const result = await db.execute({
                sql: `INSERT INTO trips (title, slogan, url, price, days, generalDetails, imageUrl, terms_conditions, travel_type, locality_id, season_year, season_name, itinerary, full_itinerary, hotels_info, flights_info, departure_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id`,
                args: Object.values(tripData)
            });
            currentTripId = result.rows[0].id!.toString();
        } else {
            await db.execute({
                sql: `UPDATE trips SET title = ?, slogan = ?, url = ?, price = ?, days = ?, generalDetails = ?, imageUrl = ?, terms_conditions = ?, travel_type = ?, locality_id = ?, season_year = ?, season_name = ?, itinerary = ?, full_itinerary = ?, hotels_info = ?, flights_info = ?, departure_id = ? WHERE id = ?`,
                args: [...Object.values(tripData), currentTripId]
            });
        }

        // --- 4. Manejar imágenes adicionales ---
        const imagesToDelete = formData.getAll('delete_images').map(String);
        if (imagesToDelete.length > 0) {
            await db.batch(imagesToDelete.map(url => ({
                sql: "DELETE FROM trip_images WHERE trip_id = ? AND imageUrl = ?",
                args: [currentTripId, url]
            })), 'write');
        }

        const additionalImageFiles = formData.getAll('additionalImageFiles') as File[];
        if (additionalImageFiles.length > 0 && additionalImageFiles[0].size > 0) {
            const uploadPromises = additionalImageFiles.map(file => uploadImage(file, 'vempra_trips_gallery'));
            const newImageUrls = await Promise.all(uploadPromises);
            await db.batch(newImageUrls.map(url => ({
                sql: "INSERT INTO trip_images (trip_id, imageUrl) VALUES (?, ?)",
                args: [currentTripId, url]
            })), 'write');
        }
        
        // --- 5. Manejar Itinerario Detallado ---
        const dayTitles = formData.getAll('full_day_title').map(String);
        const dayDescriptions = formData.getAll('full_day_description').map(String);
        const dayImageFiles = formData.getAll('full_day_imageFile') as File[];
        const existingDayImageUrls = formData.getAll('full_day_existing_imageUrl').map(String);

        const fullItineraryDays = [];
        for (let i = 0; i < dayTitles.length; i++) {
            let dayImageUrl = existingDayImageUrls[i] || '';
            if (dayImageFiles[i] && dayImageFiles[i].size > 0) {
                dayImageUrl = await uploadImage(dayImageFiles[i], 'vempra_itinerary');
            }
            fullItineraryDays.push({
                title: dayTitles[i],
                description: dayDescriptions[i],
                imageUrl: dayImageUrl
            });
        }
        
        // --- 6. Manejar Itinerario Interactivo (Videos) ---
        const interactiveItinerary = JSON.parse(formData.get('itinerary')?.toString() || '[]');

        // --- 7. Actualizar viaje con los itinerarios en JSON ---
        await db.execute({
            sql: "UPDATE trips SET full_itinerary = ?, itinerary = ? WHERE id = ?",
            args: [JSON.stringify(fullItineraryDays), JSON.stringify(interactiveItinerary), currentTripId]
        });

        // --- 8. Manejar etiquetas ---
        const selectedTags = formData.getAll('tags').map(id => parseInt(id.toString(), 10));
        await db.execute({ sql: "DELETE FROM trip_tags WHERE trip_id = ?", args: [currentTripId] });
        if (selectedTags.length > 0) {
            await db.batch(selectedTags.map(tagId => ({
                sql: "INSERT INTO trip_tags (trip_id, tag_id) VALUES (?, ?)",
                args: [currentTripId, tagId]
            })), 'write');
        }
        
        formMessage = { type: 'success', text: '¡Viaje guardado con éxito!' };
        break;
      }
      default: {
          formMessage = { type: 'error', text: 'Acción no reconocida.' };
          break;
      }
    }
  } catch (e) {
    console.error("Ha ocurrido un error procesando el formulario:", e);
    formMessage = { type: 'error', text: `Error del servidor: ${(e as Error).message}` };
  }

  if (formMessage && formMessage.type === 'success') {
    let redirectUrl = '/admin?success=true'; // Fallback
    if (intent === 'update_staff_order') redirectUrl = '/admin?success=staff_order_updated#staff';
    else if (intent === 'add_staff') redirectUrl = '/admin?success=staff_added#staff';
    else if (intent === 'update_staff') redirectUrl = '/admin?success=staff_updated#staff';
    else if (intent?.includes('staff')) redirectUrl = '/admin#staff';
    else if (intent === 'add_update_trip') redirectUrl = `/admin?edit=${Astro.request.method === 'POST' ? formData.get('id') : ''}&success=trip_saved`;
    else if (intent?.includes('country') || intent?.includes('locality') || intent?.includes('tag') || intent?.includes('departure')) {
      redirectUrl = '/admin#categorias';
    }
    return Astro.redirect(redirectUrl, 303);
  }
}

// --- Cargar datos para editar (si se proporciona un ID en la URL) ---
let tripToEdit = null;
let tripTags = [];
let countryOfTripToEdit = null;
let additionalImagesToEdit = [];
const editId = Astro.url.searchParams.get('edit');
if (editId) {
    const result = await db.execute({
        sql: "SELECT * FROM trips WHERE id = ?",
        args: [editId]
    });
    if (result.rows.length > 0) {
        tripToEdit = result.rows[0];
        if (tripToEdit.locality_id) {
            const localityInfo = localities.find(l => String(l.id) === String(tripToEdit.locality_id));
            if (localityInfo) countryOfTripToEdit = localityInfo.country_id;
        }
        const tagsResult = await db.execute({
            sql: "SELECT tag_id FROM trip_tags WHERE trip_id = ?",
            args: [editId]
        });
        tripTags = tagsResult.rows.map((row) => row.tag_id);

        const imagesResult = await db.execute({
            sql: "SELECT imageUrl FROM trip_images WHERE trip_id = ?",
            args: [editId]
        });
        additionalImagesToEdit = imagesResult.rows.map((row) => (row.imageUrl));
    }
}

// --- Cargar datos de categorías para editar ---
let countryToEdit = null;
const editCountryId = Astro.url.searchParams.get('edit_country');
if (editCountryId) {
    const result = await db.execute({ sql: "SELECT * FROM countries WHERE id = ?", args: [editCountryId] });
    if (result.rows.length > 0) countryToEdit = result.rows[0];
}

let localityToEdit = null;
const editLocalityId = Astro.url.searchParams.get('edit_locality');
if (editLocalityId) {
    const result = await db.execute({ sql: "SELECT * FROM localities WHERE id = ?", args: [editLocalityId] });
    if (result.rows.length > 0) localityToEdit = result.rows[0];
}

let tagToEdit = null;
const editTagId = Astro.url.searchParams.get('edit_tag');
if (editTagId) {
    const result = await db.execute({ sql: "SELECT * FROM tags WHERE id = ?", args: [editTagId] });
    if (result.rows.length > 0) tagToEdit = result.rows[0];
}

let departureToEdit = null;
const editDepartureId = Astro.url.searchParams.get('edit_departure');
if (editDepartureId) {
    const result = await db.execute({ sql: "SELECT * FROM departures WHERE id = ?", args: [editDepartureId] });
    if (result.rows.length > 0) departureToEdit = result.rows[0];
}

let staffToEdit = null;
const editStaffId = Astro.url.searchParams.get('edit_staff');
if (editStaffId) {
    const result = await db.execute({ sql: "SELECT * FROM staff WHERE id = ?", args: [editStaffId] });
    if (result.rows.length > 0) staffToEdit = result.rows[0];
}


// --- Obtener la lista de viajes existentes para mostrarla ---
const tripsResult = await db.execute({
  sql: `
    SELECT 
      t.id, t.title, t.price, t.days, t.travel_type,
      l.name as locality_name, c.name as country_name,
      d.name as departure_name
    FROM trips t
    LEFT JOIN localities l ON t.locality_id = l.id
    LEFT JOIN countries c ON l.country_id = c.id
    LEFT JOIN departures d ON t.departure_id = d.id
    ORDER BY t.id DESC
  `,
  args: []
});
const trips = tripsResult.rows;

---

<AdminLayout title="Panel de Administración">
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js" is:inline></script>
      <!-- Contenedor para mostrar mensajes de éxito o error -->
      {formMessage && (
        <div class:list={[ 
            "px-4 py-3 rounded-lg relative mb-6 border text-center",
            { 'bg-red-100 border-red-400 text-red-700': formMessage.type === 'error' },
            { 'bg-green-100 border-green-400 text-green-700': formMessage.type === 'success' }
        ]} role="alert">
            <strong class="font-bold">{formMessage.type === 'error' ? '¡Error!' : '¡Éxito!'}</strong>
            <span class="block sm:inline ml-2">{formMessage.text}</span>
        </div>
      )}

      <!-- Pestañas de Navegación -->
      <div class="border-b border-gray-200 mb-8">
        <nav id="admin-tabs" class="-mb-px flex space-x-6" aria-label="Tabs">
          <a href="#editor" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab-target="editor">
            Añadir/Editar Viaje
          </a>
          <a href="#listado" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab-target="listado">
            Viajes Existentes
          </a>
          <a href="#categorias" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab-target="categorias">
            Gestión de Categorías
          </a>
          <a href="#staff" class="tab-button whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm" data-tab-target="staff">
            Gestionar Equipo
          </a>
        </nav>
      </div>

      <!-- Secciones de Administración -->
      <div id="tab-content">

        <!-- Panel Editor de Viajes -->
        <div id="tab-panel-editor" class="tab-panel">
        <!-- Formulario de Viajes -->
        <section id="trip-editor" class="bg-white p-8 rounded-xl shadow-lg">
          <h2 class="text-2xl font-semibold text-primary mb-6">{tripToEdit ? 'Editar Viaje' : 'Añadir Nuevo Viaje'}</h2>
          <form id="trip-form" method="POST" class="space-y-8" enctype="multipart/form-data">
            {tripToEdit && <input type="hidden" name="id" value={tripToEdit.id} />}
            <input type="hidden" name="intent" value="add_update_trip">
            <input type="hidden" name="imageUrl" value={tripToEdit?.imageUrl || ''} />

            <fieldset class="border p-4 rounded-md">
                <legend class="text-xl font-semibold px-2">Información General</legend>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-700">Título del Viaje</label>
                        <input type="text" name="title" id="title" value={tripToEdit?.title || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div>
                        <label for="slogan" class="block text-sm font-medium text-gray-700">Slogan</label>
                        <input type="text" name="slogan" id="slogan" value={tripToEdit?.slogan || ''} class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div>
                        <label for="url" class="block text-sm font-medium text-gray-700">URL (ej: peru-magico)</label>
                        <input type="text" name="url" id="url" value={tripToEdit?.url || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div>
                        <label for="price" class="block text-sm font-medium text-gray-700">Precio (USD)</label>
                        <input type="number" name="price" id="price" value={tripToEdit?.price || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div>
                        <label for="days" class="block text-sm font-medium text-gray-700">Días</label>
                        <input type="text" name="days" id="days" value={tripToEdit?.days || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div class="md:col-span-2">
                        <label for="imageFile" class="block text-sm font-medium text-gray-700">Imagen Principal</label>
                        <input type="file" name="imageFile" id="imageFile" accept="image/*" class="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100">
                        {tripToEdit?.imageUrl && (
                            <div class="mt-2">
                                <p class="text-sm text-gray-600">Imagen actual:</p>
                                <img src={tripToEdit.imageUrl} alt="Imagen actual" class="mt-2 h-24 w-auto rounded-lg" />
                                <p class="text-xs text-gray-500 mt-1">Para reemplazarla, simplemente sube una nueva imagen.</p>
                            </div>
                        )}
                    </div>

                    <div class="md:col-span-2">
                        <label for="additionalImageFiles" class="block text-sm font-medium text-gray-700">Añadir Imágenes Adicionales (Galería)</label>
                        <input type="file" name="additionalImageFiles" id="additionalImageFiles" accept="image/*" multiple class="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100">
                        <p class="mt-1 text-xs text-gray-500">Puedes seleccionar múltiples imágenes para la galería.</p>
                    </div>

                    {additionalImagesToEdit.length > 0 && (
                        <div class="md:col-span-2">
                            <h4 class="text-sm font-medium text-gray-700 mb-2">Imágenes de Galería Actuales</h4>
                            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                                {additionalImagesToEdit.map(imageUrl => (
                                    <div class="relative group border rounded-lg overflow-hidden">
                                        <img src={imageUrl} alt="Imagen del viaje" class="w-full h-24 object-cover" />
                                        <label class="absolute top-1 right-1 flex items-center space-x-1 bg-white/80 backdrop-blur-sm p-1 rounded-md text-xs cursor-pointer hover:bg-red-50 transition-colors">
                                            <input type="checkbox" name="delete_images" value={imageUrl} class="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-500" />
                                            <span class="text-red-700 font-medium">Eliminar</span>
                                        </label>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    <div class="md:col-span-2">
                        <label for="generalDetails" class="block text-sm font-medium text-gray-700">Detalles Generales (Pestaña "Info. General")</label>
                        <textarea name="generalDetails" id="generalDetails" rows="5" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">{tripToEdit?.generalDetails || ''}</textarea>
                    </div>
                    <div class="md:col-span-2">
                        <label for="terms_conditions" class="block text-sm font-medium text-gray-700">Bases y Condiciones (Pestaña "B. y Cond.")</label>
                        <textarea name="terms_conditions" id="terms_conditions" rows="5" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">{tripToEdit?.terms_conditions || ''}</textarea>
                    </div>
                </div>
            </fieldset>
            <fieldset class="border p-4 rounded-md">
                <legend class="text-xl font-semibold px-2">Categorización</legend>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                    <div>
                        <label for="country" class="block text-sm font-medium text-gray-700">Destino</label>
                        <select id="country" name="country_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                            <option value="">Selecciona un destino</option>
                            {countries.map((country: any) => (
                            <option value={country.id} selected={countryOfTripToEdit != null && String(countryOfTripToEdit) === String(country.id)}>{country.name}</option>
                            ))}
                        </select>
                    </div>
                    <div id="locality-wrapper" style="display: none;">
                        <label for="locality" class="block text-sm font-medium text-gray-700">Localidad</label>
                        <select id="locality" name="locality_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                            <option value="">Primero selecciona un destino</option>
                        </select>
                    </div>
                    <div>
                        <label for="travel_type" class="block text-sm font-medium text-gray-700">Forma de Viaje</label>
                        <select id="travel_type" name="travel_type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                            <option value="Personalizado" selected={tripToEdit?.travel_type === 'Personalizado'}>Personalizado</option>
                            <option value="Grupal" selected={tripToEdit?.travel_type === 'Grupal'}>Grupal</option>
                        </select>
                    </div>
                    <div>
                        <label for="season_name" class="block text-sm font-medium text-gray-700">Temporada (ej: Verano 2025)</label>
                        <input type="text" name="season_name" id="season_name" value={tripToEdit?.season_name || ''} class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                    </div>
                    <div>
                        <label for="season_year" class="block text-sm font-medium text-gray-700">Año de la Temporada</label>
                        <input type="number" name="season_year" id="season_year" value={tripToEdit?.season_year || ''} class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50" placeholder="Ej: 2024">
                    </div>
                    <div>
                        <label for="departure" class="block text-sm font-medium text-gray-700">Salida desde</label>
                        <select id="departure" name="departure_id" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                            <option value="">Selecciona una salida</option>
                            {departures.map((departure: any) => ( <option value={departure.id} selected={tripToEdit?.departure_id != null && String(tripToEdit.departure_id) === String(departure.id)}>{departure.name}</option>))}
                        </select>
                    </div>
                </div>
                <div class="mt-6">
                    <label class="block text-sm font-medium text-gray-700">Temáticas (Etiquetas)</label>
                    <div class="mt-2 grid grid-cols-2 md:grid-cols-4 gap-4">
                        {tags.map((tag: any) => (
                        <div class="flex items-start">
                            <div class="flex h-5 items-center">
                                <input id={`tag-${tag.id}`} name="tags" type="checkbox" value={tag.id} checked={tripTags.includes(tag.id)} class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                            </div>
                            <div class="ml-3 text-sm">
                                <label for={`tag-${tag.id}`} class="font-medium text-gray-700">{tag.name}</label>
                            </div>
                        </div>
                        ))}
                    </div>
                </div>
            </fieldset>
             <fieldset class="border p-4 rounded-md">
                 <legend class="text-xl font-semibold px-2">Itinerario Interactivo (Videos)</legend>
                 <input type="hidden" name="itinerary" id="itinerary-json">
                 <div id="itinerary-days-container" class="space-y-6 mt-4">
                     <!-- Los días del itinerario se insertarán aquí dinámicamente -->
                 </div>
                 <button type="button" id="add-day-btn" class="mt-4 inline-flex items-center px-4 py-2 border border-dashed border-gray-400 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                     Añadir Día
                 </button>
             </fieldset>
 
             <fieldset class="border p-4 rounded-md">
                <legend class="text-xl font-semibold px-2">Itinerario Detallado (Pestaña)</legend>
                <div id="full-itinerary-days-container" class="space-y-6 mt-4">
                    <!-- Días del itinerario detallado -->
                </div>
                <button type="button" id="add-full-day-btn" class="mt-4 inline-flex items-center px-4 py-2 border border-dashed border-gray-400 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                    Añadir Día al Itinerario Detallado
                </button>
             </fieldset>

             <!-- Plantilla para el itinerario detallado -->
             <template id="full-itinerary-day-template">
                <div class="full-itinerary-day-item bg-white p-4 rounded-lg shadow-sm border relative">
                    <div class="drag-handle absolute top-1/2 -left-3 -translate-y-1/2 cursor-grab text-gray-400 hover:text-gray-600 p-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M10 19a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/></svg>
                    </div>
                    <div class="pl-6">
                        <input type="hidden" name="full_day_existing_imageUrl" value="">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Título del Día</label>
                                <input type="text" name="full_day_title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Imagen del Día</label>
                                <input type="file" name="full_day_imageFile" accept="image/*" class="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100">
                                <div class="current-image-preview mt-2" style="display: none;">
                                    <p class="text-sm text-gray-600">Imagen actual:</p>
                                    <img src="" alt="Imagen actual" class="mt-1 h-20 w-auto rounded-lg" />
                                </div>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700">Descripción del Día</label>
                                <textarea name="full_day_description" rows="5" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50"></textarea>
                            </div>
                        </div>
                        <button type="button" class="remove-full-day-btn absolute top-2 right-2 text-red-500 hover:text-red-700 font-bold p-2">&times;</button>
                    </div>
                </div>
             </template>

             <!-- Plantilla para un nuevo día (oculta) -->
             <template id="itinerary-day-template">
                 <div class="itinerary-day-item bg-white p-4 rounded-lg shadow-sm border relative">
                    <div class="drag-handle absolute top-1/2 -left-3 -translate-y-1/2 cursor-grab text-gray-400 hover:text-gray-600 p-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M10 19a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/></svg>
                    </div>
                     <div class="pl-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Título del Día (ej: Arequipa)</label>
                                <input type="text" name="day_title" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">URL del Video</label>
                                <input type="url" name="day_videoUrl" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50" placeholder="https://.../video.mp4">
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700">Slogan / Frase principal</label>
                                <input type="text" name="day_slogan" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50">
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700">Puntos Clave (uno por línea)</label>
                                <textarea name="day_points" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm bg-gray-50"></textarea>
                            </div>
                         </div>
                         <button type="button" class="remove-day-btn absolute top-2 right-2 text-red-500 hover:text-red-700 font-bold p-2">&times;</button>
                     </div>
                 </div>
             </template>
 
             <fieldset class="border p-4 rounded-md">
                 <legend class="text-xl font-semibold px-2">Información Adicional</legend>
                 <div class="space-y-6 mt-4">
                     <div>
                         <label for="hotels_info" class="block text-sm font-medium text-gray-700">Información de Hoteles</label>
                         <textarea name="hotels_info" id="hotels_info" rows="6" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50" placeholder="Describe los hoteles incluidos...">{tripToEdit?.hotels_info || ''}</textarea>
                     </div>
                     <div>
                         <label for="flights_info" class="block text-sm font-medium text-gray-700">Información de Vuelos</label>
                         <textarea name="flights_info" id="flights_info" rows="6" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50" placeholder="Información sobre vuelos, qué incluye/no incluye, etc.">{tripToEdit?.flights_info || ''}</textarea>
                     </div>
                 </div>
             </fieldset>
 
            <div class="flex justify-end space-x-4 pt-4">
                {tripToEdit && <a href="/admin#listado" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Cancelar</a>}
                <button type="submit" class="inline-flex justify-center rounded-md border border-transparent bg-primary py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2">
                    {tripToEdit ? 'Actualizar Viaje' : 'Guardar Viaje'}
                </button>
            </div>
          </form>
        </section>
        </div>

        <!-- Panel Listado de Viajes -->
        <div id="tab-panel-listado" class="tab-panel hidden">
        <!-- Tabla de Viajes Existentes -->
        <section id="trip-list" class="bg-white p-8 rounded-xl shadow-lg">
          <h2 class="text-2xl font-semibold text-primary mb-4">Viajes Existentes</h2>
          <div class="overflow-x-auto">
            <table id="trips-table" class="min-w-full divide-y divide-gray-200 table-auto">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="0">Título<span class="sort-indicator"></span></th>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="1">Destino<span class="sort-indicator"></span></th>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="2" data-sort-type="number">Precio<span class="sort-indicator"></span></th>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="3">Días<span class="sort-indicator"></span></th>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="4">Tipo<span class="sort-indicator"></span></th>
                  <th scope="col" class="sortable-header px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" data-column-index="5">Salida<span class="sort-indicator"></span></th>
                  <th scope="col" class="relative px-6 py-3"><span class="sr-only">Acciones</span></th>
                </tr>
                <!-- Fila de Filtros -->
                <tr class="bg-gray-100">
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="0"></th>
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="1"></th>
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="2"></th>
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="3"></th>
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="4"></th>
                  <th class="px-6 py-2"><input type="text" placeholder="Filtrar..." class="filter-input w-full px-2 py-1 border border-gray-300 rounded-md text-sm font-normal bg-white" data-column="5"></th>
                  <th class="px-6 py-2"></th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {trips.map((trip: any) => (
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{trip.title}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{trip.locality_name || 'N/A'}, {trip.country_name || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${trip.price}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{trip.days}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{trip.travel_type}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{trip.departure_name || 'N/A'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-4">
                      <a href={`/admin?edit=${trip.id}`} class="text-indigo-600 hover:text-indigo-900">Editar</a>
                      <form action={`/api/trips/delete/${trip.id}`} method="POST" class="inline-block">
                        <button type="submit" class="text-red-600 hover:text-red-900" onclick="return confirm('¿Estás seguro de que quieres eliminar este viaje?');">Eliminar</button>
                      </form>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
        </div>

        <!-- Panel de Categorías -->
        <div id="tab-panel-categorias" class="tab-panel hidden">
        <!-- Gestión de Categorías -->
        <section id="category-management" class="bg-white p-8 rounded-xl shadow-lg">
          <h2 class="text-3xl font-bold text-gray-800 mb-6">Gestionar Categorías</h2>
          <div class="space-y-4">
            <details id="details-country" class="bg-slate-50 border rounded-lg" open={!!countryToEdit}>
                <summary class="p-4 cursor-pointer font-semibold text-lg flex justify-between items-center">
                    <span>Destinos</span>
                    <span class="details-marker"></span>
                </summary>
                <div class="p-4 border-t border-slate-200 grid grid-cols-1 md:grid-cols-2 gap-8">
                    <form method="POST" class="space-y-4">
                        <h4 class="font-semibold text-gray-700">{countryToEdit ? 'Editar' : 'Añadir'} Destino</h4>
                        <input type="hidden" name="intent" value={countryToEdit ? 'update_country' : 'add_country'}>
                        {countryToEdit && <input type="hidden" name="category_id" value={countryToEdit.id} />}
                        <div>
                            <label for="country_name" class="block text-sm font-medium text-gray-700">Nombre del Destino</label>
                            <input type="text" name="country_name" id="country_name" value={countryToEdit?.name || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div>
                            <label for="country_url" class="block text-sm font-medium text-gray-700">URL (ej: peru)</label>
                            <input type="text" name="country_url" id="country_url" value={countryToEdit?.url || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div class="flex space-x-2">
                            <button type="submit" class="flex-grow inline-flex justify-center rounded-md border border-transparent bg-green-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-green-700">{countryToEdit ? 'Actualizar' : 'Añadir'}</button>
                            {countryToEdit && <a href="/admin#categorias" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">Cancelar</a>}
                        </div>
                    </form>
                    <div class="max-h-64 overflow-y-auto">
                        <h4 class="font-semibold text-gray-700 mb-4">Destinos Existentes</h4>
                        <ul class="space-y-2">
                            {countries.map((c: any) => (
                            <li class="flex justify-between items-center text-sm p-2 rounded-md bg-white border">
                                <span>{c.name}</span>
                                <div class="flex items-center space-x-3">
                                <a href={`/admin?edit_country=${c.id}#categorias`} class="text-blue-600 hover:underline text-xs font-semibold">EDITAR</a>
                                <form method="POST"><input type="hidden" name="intent" value="delete_country"/><input type="hidden" name="category_id" value={c.id}/><button type="submit" class="text-red-600 hover:underline text-xs font-semibold" onclick="return confirm('¿Seguro? Esto fallará si el destino está en uso.')">ELIMINAR</button></form>
                                </div>
                            </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </details>
            <details id="details-locality" class="bg-slate-50 border rounded-lg" open={!!localityToEdit}>
                <summary class="p-4 cursor-pointer font-semibold text-lg flex justify-between items-center">
                    <span>Localidades</span>
                    <span class="details-marker"></span>
                </summary>
                <div class="p-4 border-t border-slate-200 grid grid-cols-1 md:grid-cols-2 gap-8">
                    <form method="POST" class="space-y-4">
                        <h4 class="font-semibold text-gray-700">{localityToEdit ? 'Editar' : 'Añadir'} Localidad</h4>
                        <input type="hidden" name="intent" value={localityToEdit ? 'update_locality' : 'add_locality'}>
                        {localityToEdit && <input type="hidden" name="category_id" value={localityToEdit.id} />}
                        <div>
                            <label for="locality_name" class="block text-sm font-medium text-gray-700">Nombre de la Localidad</label>
                            <input type="text" name="locality_name" id="locality_name" value={localityToEdit?.name || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div>
                            <label for="locality_url" class="block text-sm font-medium text-gray-700">URL (ej: arequipa)</label>
                            <input type="text" name="locality_url" id="locality_url" value={localityToEdit?.url || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div>
                            <label for="parent_country_id" class="block text-sm font-medium text-gray-700">Destino Padre</label>
                            <select id="parent_country_id" name="parent_country_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                                <option value="">Selecciona un destino</option>
                                {countries.map((country: any) => ( 
                                    <option value={country.id} selected={localityToEdit != null && String(localityToEdit.country_id) === String(country.id)}>{country.name}</option> 
                                ))}
                            </select>
                        </div>
                        <div class="flex space-x-2">
                            <button type="submit" class="flex-grow inline-flex justify-center rounded-md border border-transparent bg-green-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-green-700">{localityToEdit ? 'Actualizar' : 'Añadir'}</button>
                            {localityToEdit && <a href="/admin#categorias" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">Cancelar</a>}
                        </div>
                    </form>
                    <div class="max-h-64 overflow-y-auto">
                        <h4 class="font-semibold text-gray-700 mb-4">Localidades Existentes</h4>
                        <ul class="space-y-2">
                            {localities.map((l: any) => (
                            <li class="flex justify-between items-center text-sm p-2 rounded-md bg-white border">
                                <span>{l.name} <em class="text-gray-500 text-xs">({countries.find(c => String(c.id) === String(l.country_id))?.name || 'Destino no encontrado'})</em></span>
                                <div class="flex items-center space-x-3">
                                <a href={`/admin?edit_locality=${l.id}#categorias`} class="text-blue-600 hover:underline text-xs font-semibold">EDITAR</a>
                                <form method="POST"><input type="hidden" name="intent" value="delete_locality"/><input type="hidden" name="category_id" value={l.id}/><button type="submit" class="text-red-600 hover:underline text-xs font-semibold" onclick="return confirm('¿Seguro? Esto fallará si la localidad está en uso.')">ELIMINAR</button></form>
                                </div>
                            </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </details>
            <details id="details-tag" class="bg-slate-50 border rounded-lg" open={!!tagToEdit}>
                <summary class="p-4 cursor-pointer font-semibold text-lg flex justify-between items-center">
                    <span>Temáticas</span>
                    <span class="details-marker"></span>
                </summary>
                <div class="p-4 border-t border-slate-200 grid grid-cols-1 md:grid-cols-2 gap-8">
                    <form method="POST" class="space-y-4">
                        <h4 class="font-semibold text-gray-700">{tagToEdit ? 'Editar' : 'Añadir'} Temática</h4>
                        <input type="hidden" name="intent" value={tagToEdit ? 'update_tag' : 'add_tag'}>
                        {tagToEdit && <input type="hidden" name="category_id" value={tagToEdit.id} />}
                        <div>
                            <label for="tag_name" class="block text-sm font-medium text-gray-700">Nombre de la Temática</label>
                            <input type="text" name="tag_name" id="tag_name" value={tagToEdit?.name || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div class="flex space-x-2">
                            <button type="submit" class="flex-grow inline-flex justify-center rounded-md border border-transparent bg-green-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-green-700">{tagToEdit ? 'Actualizar' : 'Añadir'}</button>
                            {tagToEdit && <a href="/admin#categorias" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">Cancelar</a>}
                        </div>
                    </form>
                    <div class="max-h-64 overflow-y-auto">
                        <h4 class="font-semibold text-gray-700 mb-4">Temáticas Existentes</h4>
                        <ul class="space-y-2">
                            {tags.map((t: any) => (
                            <li class="flex justify-between items-center text-sm p-2 rounded-md bg-white border">
                                <span>{t.name}</span>
                                <div class="flex items-center space-x-3">
                                <a href={`/admin?edit_tag=${t.id}#categorias`} class="text-blue-600 hover:underline text-xs font-semibold">EDITAR</a>
                                <form method="POST"><input type="hidden" name="intent" value="delete_tag"/><input type="hidden" name="category_id" value={t.id}/><button type="submit" class="text-red-600 hover:underline text-xs font-semibold" onclick="return confirm('¿Seguro?')">ELIMINAR</button></form>
                                </div>
                            </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </details>
            <details id="details-departure" class="bg-slate-50 border rounded-lg" open={!!departureToEdit}>
                <summary class="p-4 cursor-pointer font-semibold text-lg flex justify-between items-center">
                    <span>Salidas desde</span>
                    <span class="details-marker"></span>
                </summary>
                <div class="p-4 border-t border-slate-200 grid grid-cols-1 md:grid-cols-2 gap-8">
                    <form method="POST" class="space-y-4">
                        <h4 class="font-semibold text-gray-700">{departureToEdit ? 'Editar' : 'Añadir'} Salida</h4>
                        <input type="hidden" name="intent" value={departureToEdit ? 'update_departure' : 'add_departure'}>
                        {departureToEdit && <input type="hidden" name="category_id" value={departureToEdit.id} />}
                        <div>
                            <label for="departure_name" class="block text-sm font-medium text-gray-700">Nombre de la Salida</label>
                            <input type="text" name="departure_name" id="departure_name" value={departureToEdit?.name || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div>
                            <label for="departure_url" class="block text-sm font-medium text-gray-700">URL (ej: buenos-aires)</label>
                            <input type="text" name="departure_url" id="departure_url" value={departureToEdit?.url || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm bg-gray-50">
                        </div>
                        <div class="flex space-x-2">
                            <button type="submit" class="flex-grow inline-flex justify-center rounded-md border border-transparent bg-green-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-green-700">{departureToEdit ? 'Actualizar' : 'Añadir'}</button>
                            {departureToEdit && <a href="/admin#categorias" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">Cancelar</a>}
                        </div>
                    </form>
                    <div class="max-h-64 overflow-y-auto">
                        <h4 class="font-semibold text-gray-700 mb-4">Salidas Existentes</h4>
                        <ul class="space-y-2">
                            {departures.map((d: any) => (
                            <li class="flex justify-between items-center text-sm p-2 rounded-md bg-white border">
                                <span>{d.name}</span>
                                <div class="flex items-center space-x-3">
                                <a href={`/admin?edit_departure=${d.id}#categorias`} class="text-blue-600 hover:underline text-xs font-semibold">EDITAR</a>
                                <form method="POST"><input type="hidden" name="intent" value="delete_departure"/><input type="hidden" name="category_id" value={d.id}/><button type="submit" class="text-red-600 hover:underline text-xs font-semibold" onclick="return confirm('¿Seguro? Esto fallará si la salida está en uso.')">ELIMINAR</button></form>
                                </div>
                            </li>
                            ))}
                        </ul>
                    </div>
                </div>
            </details>
          </div>
        </section>
        </div>

        <!-- Panel de Gestión de Equipo -->
        <div id="tab-panel-staff" class="tab-panel hidden">
          <section id="staff-management" class="bg-white p-8 rounded-xl shadow-lg">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Gestionar Equipo</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
              <!-- Formulario para añadir/editar miembro -->
              <div class="md:col-span-1">
                <h3 class="text-xl font-semibold text-primary mb-4">{staffToEdit ? 'Editar Miembro' : 'Añadir Nuevo Miembro'}</h3>
                <form method="POST" class="space-y-4" enctype="multipart/form-data">
                  <input type="hidden" name="intent" value={staffToEdit ? 'update_staff' : 'add_staff'}>
                  {staffToEdit && <input type="hidden" name="staff_id" value={staffToEdit.id} />}
                  {staffToEdit && <input type="hidden" name="staff_imageUrl" value={staffToEdit.imageUrl} />}
                  <div>
                    <label for="staff_name" class="block text-sm font-medium text-gray-700">Nombre</label>
                    <input type="text" name="staff_name" id="staff_name" value={staffToEdit?.name || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50">
                  </div>
                  <div>
                    <label for="staff_position" class="block text-sm font-medium text-gray-700">Cargo</label>
                    <input type="text" name="staff_position" id="staff_position" value={staffToEdit?.position || ''} required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50">
                  </div>
                  <div>
                    <label for="staff_description" class="block text-sm font-medium text-gray-700">Descripción</label>
                    <textarea name="staff_description" id="staff_description" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50">{staffToEdit?.description || ''}</textarea>
                  </div>
                  <div>
                    <label for="staff_imageFile" class="block text-sm font-medium text-gray-700">Foto</label>
                    <input type="file" name="staff_imageFile" id="staff_imageFile" accept="image/*" class="mt-1 block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100">
                    {staffToEdit?.imageUrl && (
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">Foto actual:</p>
                            <img src={staffToEdit.imageUrl} alt="Foto actual" class="mt-2 h-24 w-auto rounded-lg" />
                            <p class="text-xs text-gray-500 mt-1">Para reemplazarla, sube una nueva imagen.</p>
                        </div>
                    )}
                  </div>
                  <div class="flex space-x-2 pt-2">
                    <button type="submit" class="flex-grow inline-flex justify-center rounded-md border border-transparent bg-primary py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-opacity-90">{staffToEdit ? 'Actualizar' : 'Añadir'}</button>
                    {staffToEdit && <a href="/admin#staff" class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50">Cancelar</a>}
                  </div>
                </form>
              </div>
              <!-- Lista de miembros existentes -->
              <div class="md:col-span-2 max-h-[60vh] overflow-y-auto pr-2">
                <form method="POST" id="staff-order-form" data-astro-reload>
                    <input type="hidden" name="intent" value="update_staff_order">
                    <input type="hidden" name="staff_order" id="staff-order-input">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-xl font-semibold text-primary">Equipo Actual</h3>
                        <button type="submit" class="inline-flex items-center justify-center rounded-md border border-transparent bg-green-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-green-700 disabled:bg-green-400 disabled:cursor-not-allowed">
                            <svg class="spinner animate-spin -ml-1 mr-3 h-5 w-5 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span class="button-text">Guardar Orden</span>
                        </button>
                    </div>
                    <p class="text-xs text-gray-500 mb-4">Arrastra y suelta los miembros para reordenarlos.</p>
                    <ul id="staff-list-container" class="space-y-3">
                      {staff.map((member: any) => (
                        <li class="staff-member-item flex items-center justify-between p-3 bg-white rounded-lg border shadow-sm" data-id={member.id}>
                          <div class="flex items-center space-x-4">
                            <div class="drag-handle cursor-grab text-gray-400 hover:text-gray-600">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M10 19a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm4 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm-8 0a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/></svg>
                            </div>
                            <img src={member.imageUrl} alt={member.name} class="w-12 h-12 rounded-full object-cover" />
                            <div>
                              <p class="font-semibold text-gray-800">{member.name}</p>
                              <p class="text-sm text-gray-500">{member.position}</p>
                            </div>
                          </div>
                          <div class="flex items-center space-x-4">
                            <a href={`/admin?edit_staff=${member.id}#staff`} class="text-blue-600 hover:underline text-sm font-semibold">Editar</a>
                            <form method="POST">
                              <input type="hidden" name="intent" value="delete_staff" />
                              <input type="hidden" name="staff_id" value={member.id} />
                              <button type="submit" class="text-red-600 hover:underline text-sm font-semibold" onclick="return confirm('¿Estás seguro de que quieres eliminar a este miembro?');">Eliminar</button>
                            </form>
                          </div>
                        </li>
                      ))}
                    </ul>
                </form>
              </div>
            </div>
          </section>
        </div>
      </div>
</AdminLayout>

<style>
  .sortable-header .sort-indicator::after {
    content: ' ';
    display: inline-block;
    width: 0;
    height: 0;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    margin-left: 5px;
    opacity: 0.5;
    transition: opacity 0.2s;
  }
  .sortable-header.sort-asc .sort-indicator::after { border-bottom: 4px solid currentColor; opacity: 1; }
  .sortable-header.sort-desc .sort-indicator::after { border-top: 4px solid currentColor; opacity: 1; }

  details > summary {
    list-style: none;
  }
  details > summary::-webkit-details-marker {
    display: none;
  }
  .details-marker {
    transition: transform 0.2s ease-in-out;
  }
  .details-marker::before {
    content: '▼';
    font-size: 0.8em;
  }
  details[open] > summary .details-marker {
    transform: rotate(-180deg);
  }

  .tab-button {
    @apply border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300;
  }
  .tab-button.active {
    @apply border-primary text-primary;
  }

  .sortable-ghost {
    opacity: 0.4;
    background: #c8ebfb;
  }
  .sortable-chosen {
    cursor: grabbing;
  }
</style>

<script define:vars={{ allLocalities: localities, selectedLocality: tripToEdit?.locality_id, initialCountryId: countryOfTripToEdit, tripToEdit: tripToEdit }}>
  function createDayElement(dayData = {}, container, template) {
      const clone = template.content.cloneNode(true);
      const dayElement = clone.querySelector('.itinerary-day-item');

      dayElement.querySelector('[name="day_title"]').value = dayData.title || '';
      dayElement.querySelector('[name="day_slogan"]').value = dayData.slogan || '';
      dayElement.querySelector('[name="day_points"]').value = dayData.points || '';
      dayElement.querySelector('[name="day_videoUrl"]').value = dayData.videoUrl || '';

      dayElement.querySelector('.remove-day-btn').addEventListener('click', () => {
          dayElement.remove();
      });

      container.appendChild(clone);
  }

  function createFullDayElement(dayData = {}, container, template) {
      const clone = template.content.cloneNode(true);
      const dayElement = clone.querySelector('.full-itinerary-day-item');

      dayElement.querySelector('[name="full_day_title"]').value = dayData.title || '';
      dayElement.querySelector('[name="full_day_description"]').value = dayData.description || '';
      
      const existingImageUrlInput = dayElement.querySelector('[name="full_day_existing_imageUrl"]');
      existingImageUrlInput.value = dayData.imageUrl || '';

      const previewContainer = dayElement.querySelector('.current-image-preview');
      const previewImg = previewContainer.querySelector('img');
      
      if (dayData.imageUrl) {
          previewImg.src = dayData.imageUrl;
          previewContainer.style.display = 'block';
      } else {
          previewContainer.style.display = 'none';
      }

      dayElement.querySelector('.remove-full-day-btn').addEventListener('click', () => dayElement.remove());
      container.appendChild(clone);
  }

  function setupDragAndDrop() {
    if (typeof Sortable === 'undefined') {
        console.error("SortableJS no está cargado.");
        return;
    }
    const makeSortable = (containerId, handleClass) => {
      const container = document.getElementById(containerId);
      if (container) {
        new Sortable(container, {
            animation: 150,
            handle: handleClass,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
        });
      }
    };
    makeSortable('itinerary-days-container', '.drag-handle');
    makeSortable('full-itinerary-days-container', '.drag-handle');
    makeSortable('staff-list-container', '.drag-handle');
  }

  function setupAdminTabs() {
    const tabsContainer = document.getElementById('admin-tabs');
    if (!tabsContainer) return;

    const tabs = Array.from(tabsContainer.querySelectorAll('.tab-button'));
    const panels = Array.from(document.querySelectorAll('.tab-panel'));

    const setActiveTab = (tabId) => {
      tabs.forEach(tab => tab.classList.toggle('active', tab.dataset.tabTarget === tabId));
      panels.forEach(panel => panel.classList.toggle('hidden', panel.id !== `tab-panel-${tabId}`));
    };

    tabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        const tabId = tab.dataset.tabTarget;
        setActiveTab(tabId);
        window.history.replaceState(null, '', `#${tabId}`);
      });
    });

    const currentHash = window.location.hash.substring(1);
    const searchParams = new URLSearchParams(window.location.search);
    const hasCategoryEditParam = ['edit_country', 'edit_locality', 'edit_tag', 'edit_departure'].some(p => searchParams.has(p));
    const hasStaffEditParam = searchParams.has('edit_staff');
    const hasTripEditParam = searchParams.has('edit');

    let initialTabId = 'listado';
    if (hasTripEditParam) initialTabId = 'editor';
    else if (hasCategoryEditParam) initialTabId = 'categorias';
    else if (hasStaffEditParam) initialTabId = 'staff';
    else if (['editor', 'listado', 'categorias', 'staff'].includes(currentHash)) initialTabId = currentHash;
    
    setActiveTab(initialTabId);
  }

  function initializeAdminPanel() {
    const tripForm = document.getElementById('trip-form');
    if (tripForm) {
      // --- Itinerario Interactivo (Videos) ---
      const itineraryContainer = document.getElementById('itinerary-days-container');
      const addDayBtn = document.getElementById('add-day-btn');
      const itineraryTemplate = document.getElementById('itinerary-day-template');
      const itineraryJsonInput = document.getElementById('itinerary-json');

      if (itineraryContainer && addDayBtn && itineraryTemplate && itineraryJsonInput) {
        const serializeItinerary = () => {
            const days = Array.from(itineraryContainer.querySelectorAll('.itinerary-day-item')).map(item => ({
                title: item.querySelector('[name="day_title"]').value,
                videoUrl: item.querySelector('[name="day_videoUrl"]').value,
                slogan: item.querySelector('[name="day_slogan"]').value,
                points: item.querySelector('[name="day_points"]').value,
            }));
            itineraryJsonInput.value = JSON.stringify(days);
        };
        addDayBtn.addEventListener('click', () => createDayElement({}, itineraryContainer, itineraryTemplate));
        tripForm.addEventListener('submit', serializeItinerary);
        if (tripToEdit?.itinerary) {
            try { JSON.parse(tripToEdit.itinerary).forEach(day => createDayElement(day, itineraryContainer, itineraryTemplate)); } catch (e) { console.error("Error al parsear itinerario:", e); }
        }
      }

      // --- Itinerario Detallado (Imágenes) ---
      const fullItineraryContainer = document.getElementById('full-itinerary-days-container');
      const addFullDayBtn = document.getElementById('add-full-day-btn');
      const fullTemplate = document.getElementById('full-itinerary-day-template');

      if (fullItineraryContainer && addFullDayBtn && fullTemplate) {
        addFullDayBtn.addEventListener('click', () => createFullDayElement({}, fullItineraryContainer, fullTemplate));
        if (tripToEdit?.full_itinerary) {
            try { JSON.parse(tripToEdit.full_itinerary).forEach(day => createFullDayElement(day, fullItineraryContainer, fullTemplate)); } catch (e) { console.error("Error al parsear itinerario detallado:", e); }
        }
      }

      // --- Selectores de País/Localidad ---
      const countrySelect = tripForm.querySelector('#country');
      const localitySelect = tripForm.querySelector('#locality');
      const localityWrapper = document.getElementById('locality-wrapper');
      if (countrySelect instanceof HTMLSelectElement && localitySelect instanceof HTMLSelectElement && localityWrapper) {
        const updateLocalities = (countryId, localityIdToSelect) => {
          localityWrapper.style.display = (countryId && String(countryId).length > 0) ? 'block' : 'none';
          localitySelect.innerHTML = '';
          if (!countryId) {
            localitySelect.innerHTML = '<option value="">Primero selecciona un destino</option>';
            return;
          }
          const filtered = allLocalities.filter(l => String(l.country_id) === String(countryId));
          const placeholderText = filtered.length > 0 ? "Selecciona una localidad" : "No hay localidades para este destino";
          localitySelect.innerHTML = `<option value="">${placeholderText}</option>`;
          filtered.forEach(loc => {
            const option = new Option(loc.name, loc.id.toString());
            if (localityIdToSelect != null && String(loc.id) === String(localityIdToSelect)) {
              option.selected = true;
            }
            localitySelect.add(option);
          });
        };
        countrySelect.addEventListener('change', (event) => updateLocalities(event.target.value, null));
        updateLocalities(initialCountryId, selectedLocality);
      }
    }

    const staffOrderForm = document.getElementById('staff-order-form');
    if (staffOrderForm) {
        staffOrderForm.addEventListener('submit', () => {
            const staffListContainer = document.getElementById('staff-list-container');
            if (staffListContainer) {
                const orderedIds = Array.from(staffListContainer.querySelectorAll('.staff-member-item')).map(item => item.dataset.id);
                const hiddenInput = document.getElementById('staff-order-input');
                if (hiddenInput) hiddenInput.value = orderedIds.join(',');
            }
            const saveBtn = staffOrderForm.querySelector('button[type="submit"]');
            saveBtn.disabled = true;
            saveBtn.querySelector('.spinner')?.classList.remove('hidden');
            saveBtn.querySelector('.button-text').textContent = 'Guardando...';
        });
    }

    setupAdminTabs();
    setupDragAndDrop();

    const formMessageElement = document.querySelector('[role="alert"]');
    if (formMessageElement) {
        const url = new URL(window.location.href);
        if (url.searchParams.has('success') || url.searchParams.has('error')) {
            const newUrl = new URL(window.location.href);
            newUrl.searchParams.delete('success');
            newUrl.searchParams.delete('error');
            window.history.replaceState({}, document.title, newUrl.toString());
        }
        setTimeout(() => {
            formMessageElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease, margin-top 0.5s ease';
            formMessageElement.style.opacity = '0';
            formMessageElement.style.transform = 'translateY(-20px)';
            formMessageElement.style.marginTop = '-1rem';
            setTimeout(() => formMessageElement.remove(), 500);
        }, 4500);
    }
  }

  document.addEventListener('astro:page-load', initializeAdminPanel);
  initializeAdminPanel();
</script>
''